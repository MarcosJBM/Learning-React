import React, { useEffect, useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    document.title = `Clicks ${count}`;
  });

  return (
    <div>
      <p>
        Voce clicou <strong>{count}</strong> vezes.
      </p>
      <button onClick={() => setCount(count + 1)}>Clique</button>
    </div>
  );
}

export default function HooksSummary() {
  return (
    <div>
      <h1>Hooks de forma resumida</h1>
      <p>
        Hooks permitem que voc√™ use o state e outros recursos do React sem
        escrever uma classe.
      </p>
      <h2>üìå State Hook</h2>
      <p>
        useState √© um Hook, n√≥s o chamamos dentro de um componente funcional
        para adicionar alguns states locais a ele. React ir√° preservar este
        state entre re-renderiza√ß√µes. useState retorna um par: o valor do state
        atual e uma fun√ß√£o que permite atualiz√°-lo. Podemos chamar essa fun√ß√£o a
        partir de um manipulador de evento ou de qualquer outro lugar. √â
        parecido com this.setState em uma classe, exceto que n√£o mescla o antigo
        state com o novo.
      </p>
      <p>
        O √∫nico argumento para useState √© o state inicial. Diferente de
        this.state, o state n√£o precisa ser um objeto ‚Äî apesar de que possa ser
        se voc√™ quiser. O argumento de state inicial √© utilizado apenas durante
        a primeira renderiza√ß√£o.
      </p>
      <Counter />
      <h3>Mas, o que √© um Hook?</h3>
      <p>
        Hooks s√£o fun√ß√µes que permitem a voc√™ ‚Äúligar-se‚Äù aos recursos de state e
        ciclo de vida do React a partir de componentes funcionais. Hooks n√£o
        funcionam dentro de classes ‚Äî eles permitem que voc√™ use React sem
        classes.
      </p>
      <h2>‚ö°Ô∏è Hook de Efeito</h2>
      <p>
        Voc√™ provavelmente j√° realizou obten√ß√£o de dados (data fetching),
        subscri√ß√µes (subscriptions) ou mudan√ßas manuais no DOM atrav√©s de
        componentes React antes. N√≥s chamamos essas opera√ß√µes de ‚Äúefeitos
        colaterais‚Äù (side effects ou apenas effects) porque eles podem afetar
        outros componentes e n√£o podem ser feitos durante a renderiza√ß√£o.
      </p>
      <p>
        O Hook de Efeito, useEffect, adiciona a funcionalidade de executar
        efeitos colaterais atrav√©s de um componente funcional. Segue a mesma
        finalidade do componentDidMount, componentDidUpdate, e
        componentWillUnmount em classes React, mas unificado em uma mesma API.
      </p>
      <p>
        Quando voc√™ chama useEffect, voc√™ est√° dizendo ao React para executar a
        sua fun√ß√£o de ‚Äúefeito‚Äù ap√≥s liberar as mudan√ßas para o DOM. Efeitos s√£o
        declarados dentro do componente, para que eles tenham acesso as suas
        props e state. Por padr√£o, React executa os efeitos ap√≥s cada
        renderiza√ß√£o ‚Äî incluindo a primeira renderiza√ß√£o.
      </p>
      <h2>‚úåÔ∏è Regras dos Hooks</h2>
      <p>
        Hooks s√£o fun√ß√µes JavaScript, mas eles imp√µes duas regras adicionais:
      </p>
      <ul>
        <li>
          Apenas chame Hooks no n√≠vel mais alto. N√£o chame Hooks dentro de
          loops, condi√ß√µes ou fun√ß√µes aninhadas.
        </li>
        <li>
          Apenas chame Hooks de componentes funcionais. N√£o chame Hooks de
          fun√ß√µes JavaScript comuns.
        </li>
      </ul>
    </div>
  );
}
